{"version":3,"sources":["ClassJoke.js","ClassJokeList.js","App.js","registerServiceWorker.js","index.js"],"names":["ClassJoke","props","decrement","setState","vote","id","increment","state","bind","className","onClick","this","votes","text","React","Component","ClassJokeList","getJokes","j","seenJokes","Set","length","axios","get","headers","Accept","then","res","jokeObj","data","has","console","error","add","push","jokes","log","delta","map","sort","a","b","joke","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a8f09468.chunk.js","sourcesContent":["import React from 'react';\nimport './Joke.css';\n\nclass ClassJoke extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tvote: 0\n\t\t};\n\t\tthis.decrement = this.decrement.bind(this);\n\t\tthis.increment = this.increment.bind(this);\n\t}\n\n\tdecrement = () => {\n\t\tthis.setState({ vote: this.props.vote(this.props.id, -1) });\n\t};\n\n\tincrement = () => {\n\t\tthis.setState({ vote: this.props.vote(this.props.id, +1) });\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Joke\">\n\t\t\t\t<div className=\"Joke-votearea\">\n\t\t\t\t\t<button onClick={this.increment}>\n\t\t\t\t\t\t<i className=\"fas fa-thumbs-up\" />\n\t\t\t\t\t</button>\n\n\t\t\t\t\t<button onClick={this.decrement}>\n\t\t\t\t\t\t<i className=\"fas fa-thumbs-down\" />\n\t\t\t\t\t</button>\n\n\t\t\t\t\t{this.props.votes}\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"Joke-text\">{this.props.text}</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ClassJoke;\n","import React from 'react';\nimport axios from 'axios';\nimport ClassJoke from './ClassJoke';\nimport './JokeList.css';\n\nclass ClassJokeList extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tjokes: []\n\t\t};\n\t\tthis.vote = this.vote.bind(this);\n\t\tthis.getJokes = this.getJokes.bind(this);\n\t}\n\n\t/* function for getting jokes */\n\n\tgetJokes = async () => {\n\t\tlet j = [];\n\t\tlet seenJokes = new Set();\n\t\ttry {\n\t\t\twhile (j.length < 10) {\n\t\t\t\tawait axios\n\t\t\t\t\t.get('https://icanhazdadjoke.com', {\n\t\t\t\t\t\theaders: { Accept: 'application/json' }\n\t\t\t\t\t})\n\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\tlet jokeObj = res.data;\n\n\t\t\t\t\t\tif (!seenJokes.has(jokeObj.id)) {\n\t\t\t\t\t\t\tseenJokes.add(jokeObj.id);\n\t\t\t\t\t\t\tj.push({ ...jokeObj, votes: 0 });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.error('duplicate found!');\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t}\n\t\t\tthis.setState({ jokes: j });\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t\tconsole.log(this.state.jokes);\n\t};\n\n\t/* change vote for this id by delta (+1 or -1) */\n\n\tvote = (id, delta) => {\n\t\tthis.setState({ jokes: this.state.jokes.map((j) => (j.id === id ? { ...j, votes: j.votes + delta } : j)) });\n\t};\n\n\t/* get jokes if there are no jokes */\n\n\tasync componentDidMount() {\n\t\tthis.getJokes();\n\t}\n\n\tasync componentDidUpdate() {\n\t\tif (this.state.jokes.length === 0) {\n\t\t\tthis.getJokes();\n\t\t}\n\t}\n\n\t/* render: list of sorted jokes. */\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"JokeList\">\n\t\t\t\t<button className=\"JokeList-getmore\" onClick={() => this.setState({ jokes: [] })}>\n\t\t\t\t\tGet New Jokes\n\t\t\t\t</button>\n\n\t\t\t\t{[ ...this.state.jokes ]\n\t\t\t\t\t.sort((a, b) => b.votes - a.votes)\n\t\t\t\t\t.map((j) => <ClassJoke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={this.vote} />)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ClassJokeList;\n","import React from 'react';\n// import JokeList from './JokeList';\nimport ClassJokeList from './ClassJokeList';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{/* <JokeList /> */}\n\t\t\t<ClassJokeList />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}